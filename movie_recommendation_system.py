# -*- coding: utf-8 -*-
"""Movie Recommendation System.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-myg5fi3yVPRbMUuSLTkV6If4LvMRsjl
"""

import pandas as pd
import numpy as np
import difflib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

mdata=pd.read_csv("movies.csv")

mdata.head()

mdata.shape

selected_feature=['genres','keywords','tagline','cast','director']
selected_feature

for i in selected_feature:
  mdata[i]=mdata[i].fillna('')

combined_data=mdata['genres']+' '+mdata['keywords']+' '+mdata['tagline']+' '+mdata['cast']+' '+mdata['director']

combined_data.head()

convertor=TfidfVectorizer()

new_data=convertor.fit_transform(combined_data)

print(new_data)

similarity=cosine_similarity(new_data)

similarity

similarity.shape

try:
    del input  # Remove only if it exists
except NameError:
    pass  # Ignore if 'input' was never redefined

movie_name = input('Enter your favourite movie name: ')

list_of_title=mdata['title'].tolist()

list_of_title

find_close_match=difflib.get_close_matches(movie_name,list_of_title)

print(find_close_match)

close_match=find_close_match[0]
close_match

index_of_movie=mdata[mdata.title==close_match]['index'].values[0]
index_of_movie

similarity_score=list(enumerate(similarity[index_of_movie]))
print(similarity_score)

len(similarity_score)

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)
print(sorted_similar_movies)

# print the name of similar movies based on the index

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = mdata[mdata.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1



"""# Movie Recommendation System Using Machine Learning

"""

movie_name = input(' Enter your favourite movie name : ')

list_of_all_titles = mdata['title'].tolist()

find_close_match = difflib.get_close_matches(movie_name, list_of_all_titles)

close_match = find_close_match[0]

index_of_the_movie = mdata[mdata.title == close_match]['index'].values[0]

similarity_score = list(enumerate(similarity[index_of_the_movie]))

sorted_similar_movies = sorted(similarity_score, key = lambda x:x[1], reverse = True)

print('Movies suggested for you : \n')

i = 1

for movie in sorted_similar_movies:
  index = movie[0]
  title_from_index = mdata[mdata.index==index]['title'].values[0]
  if (i<30):
    print(i, '.',title_from_index)
    i+=1

